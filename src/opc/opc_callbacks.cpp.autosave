#include "opc_monitor.h"
#include "nodemap.h"
#include <iostream>
void opc_callbacks::beforeReadCallback(UA_Server *server,
                   const UA_NodeId *sessionId, void *sessionContext,
                   const UA_NodeId *nodeid, void *nodeContext,
                   const UA_NumericRange *range, const UA_DataValue *data){
        UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "Onward!");
        std::string NodeName=reinterpret_cast<char*>(nodeid->identifier.string.data);
        // std::cout<<NodeName<<std::endl;
       opc_callbacks* Monitor=NodeMap::Nodes[NodeName];
        std::cout<<"!!!!"<<Monitor->VariableName <<"!!!!!"<<std::endl;
        Monitor->updateVariable(server);

        //std::cout<<NodeMap::insta->VariableName<<std::endl;
        //this->updateVariable(server);
         //   opc_callbacks* insta=NodeMap::data[const_cast<char*>("HMPVariable")];
         // std::cout<< insta<<std::endl;
        }



void opc_callbacks::afterWriteCallback(UA_Server *server,
                   const UA_NodeId *sessionId, void *sessionContext,
                   const UA_NodeId *nodeId, void *nodeContext,
                   const UA_NumericRange *range, const UA_DataValue *data) {
        UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "The variable was updated");
        }

void opc_callbacks::addValueCallback(UA_Server *server) {
        UA_NodeId currentNodeId = UA_NODEID_STRING(1, VariableName);
        UA_ValueCallback callback ;
        callback.onRead = beforeReadCallback;
        callback.onWrite= afterWriteCallback;
        UA_Server_setVariableNode_valueCallback(server, currentNodeId, callback);
        }

std::map <std::string,opc_callbacks*> NodeMap::Nodes=std::map< std::string,opc_callbacks*>();

